##
## C++ Header includes
##
##* [SWC 2009.09.09] verified constructor against old code in
##    StateChartCodeWriter.writeCommentBlock() and
##    StateChartHeaderWriter.writePrologue() + .writeEpilogue().
##* [SWC 2010.01.28] refactored Velocity templates to be finer-grained, with
##  decision logic pushed into the Java writer class.
##* [SWC 2010.02.23] added _BAIL_SIG_ as enum extension here.
##* [SWC 2010.05.14] added _*_COMPLETE_SIG_ to enum extension, and defined new
##  _CompletionEvt class to enable notification of State/SM completion.
##* [SWC 2011.04.05] added support for QF namespace prefix.
##* [SWC 2011.04.25] added handling of specific base signal file location.
##* [SWC 2011.07.06] Updated legal declaration, disclaimer, and file info.
##* [SWC 2012.01.24] Added macro to customize include lines
###############################################################################
##
## File comments
##
//-*- Mode: C++; -*-
//===========================================================================
// This software contains Caltech/JPL confidential information.
//
// Copyright 2009-$year, by the California Institute of Technology.
// ALL RIGHTS RESERVED. United States Government Sponsorship Acknowledged.
// Any commercial use must be negotiated with the Office of Technology
// Transfer at the California Institute of Technology.
//
// This software may be subject to US export control laws and
// regulations. By accepting this document, the user agrees to comply
// with all applicable U.S. export laws and regulations, including the
// International Traffic and Arms Regulations, 22 C.F.R. 120-130 and the
// Export Administration Regulations, 15 C.F.R. 730-744. User has the
// responsibility to obtain export licenses, or other export authority as
// may be required before exporting such information to foreign countries
// or providing access to foreign persons.
//===========================================================================
//
//       File: ${nsPathPrefix}${smName}.h
// Created on: ${model.timestamp()}
//     Author: ${model.username()}@jpl.nasa.gov
//
// This file was generated by the JPL StateChart Autocoders, which converts UML
// Statecharts, in XML, to a C++ variant of Miro Samek's Quantum Framework.
//===========================================================================
#ifndef ${smDefName}
\#define ${smDefName}

## include QF files, or a custom include file
#*--*##if( $autocoder.hasCustomQfInclude() )
\#include <${autocoder.qfInclude}>
#*--*##else
\#include <qf_port.h>
\#include <qassert.h>
#*--*##end
#*--*##customHeaderIncludes()
#*--*##if( $autocoder.signalNamespaceType.name().equals("LOCAL") )
##- using local namespaces for signals, so need to code the path prefix
\#include <${nsPathPrefix}StatechartSignals.h>
#*----*##if( !$baseSigNsPath.equals($nsPathPrefix) )
##-  also include the base signal file
\#include <${baseSigNsPath}StatechartSignals.h>
#*----*##end
#*--*##else
\#include <${baseSigNsPath}StatechartSignals.h>
#*--*##end
##
## Include the UML StateMachine (and SubMachine) implementation headers
##
\#include <${nsPathPrefix}${smName}Impl.h>
#*--*##foreach( $submachine in $model.sort($model.getSubmachines($sm)) )
#*----*##set( $subMachineName = $mapper.mapToTypeName($submachine) )
\#include <${nsPathPrefix}${subMachineName}.h>
\#include <${nsPathPrefix}${subMachineName}Impl.h>
#*--*##end

#*--*##if( $autocoder.namespaceEnabled )
#*----*##headerNamespaces
#*--*##end
#ifndef _${nsDefPrefix}BailEventType_
\#define _${nsDefPrefix}BailEventType_

/** Bail Event used to "terminate" Orthogonal Regions and SubMachines */
struct _BailEvt : ${qfNs}QEvent {
    _BailEvt () { this->sig = ${baseSigNs}_BAIL_SIG_; };
    virtual ~_BailEvt() {};
};  // N.B.: defining a global instance here results in duplicate symbol!

/**
 * Completion Event used to signal completion of, and thus enable exiting
 * out of, Composite and SubMachine States.  Event carries the name of the
 * instance -- a composite state or a Submachine -- that has terminated.
 */
struct _CompletionEvt : ${qfNs}QEvent {
    char name[256];
    int32_t substate;   // containing substate for Submachine completion
    int32_t exitPoint;  // exitPoint used to exit Submachine, if applicable
    virtual ~_CompletionEvt() {};
};

#endif /* _${nsDefPrefix}BailEventType_ */
