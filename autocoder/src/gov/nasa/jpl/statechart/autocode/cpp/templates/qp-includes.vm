##
## C++ Source file:  Implement the include statements
##
##* [SWC 2010.02.09] implemented anew referencing C and new Python templates.
##* [SWC 2010.02.23] added _BAIL_EVENT_ as StateMachine extended variable.
##* [SWC 2010.05.14] changed class-based _BAIL_EVENT_ to single global instance.
##* [SWC 2011.07.06] Updated legal declaration, disclaimer, and file info.
##* [SWC 2012.01.24] Added macro to customize include lines
###############################################################################
##
## File comments
##
//-*- Mode: C++; -*-
//===========================================================================
// This software contains Caltech/JPL confidential information.
//
// Copyright 2009-$year, by the California Institute of Technology.
// ALL RIGHTS RESERVED. United States Government Sponsorship Acknowledged.
// Any commercial use must be negotiated with the Office of Technology
// Transfer at the California Institute of Technology.
//
// This software may be subject to US export control laws and
// regulations. By accepting this document, the user agrees to comply
// with all applicable U.S. export laws and regulations, including the
// International Traffic and Arms Regulations, 22 C.F.R. 120-130 and the
// Export Administration Regulations, 15 C.F.R. 730-744. User has the
// responsibility to obtain export licenses, or other export authority as
// may be required before exporting such information to foreign countries
// or providing access to foreign persons.
//===========================================================================
//
//       File: ${nsPathPrefix}${smName}.cpp
// Created on: ${model.timestamp()}
//     Author: ${model.username()}@jpl.nasa.gov
//
// This file was generated by the JPL StateChart Autocoders, which converts UML
// Statecharts, in XML, to a C++ variant of Miro Samek's Quantum Framework.
//===========================================================================
#*--*##if( $autocoder.executionTraceOn )
\#include <stdlib.h>
\#include <string.h>
\#include <log_event.h>
#*--*##end
#*--*##customSourceIncludes()
\#include <${nsPathPrefix}${smName}.h>
\#include <${nsPathPrefix}${smName}Impl.h>
##
## Include the headers for any submachine references by this state machine
##
#*--*##set( $submachines = $model.getSubmachines($sm) )
#*--*##if( !$submachines.isEmpty() )
## intentional blank line

#*----*##foreach( $submachine in $model.sort($submachines) )
#*------*##set( $subMachineName = $mapper.mapToTypeName($submachine) )
\#include <${nsPathPrefix}${subMachineName}.h>
\#include <${nsPathPrefix}${subMachineName}Impl.h>
#*----*##end
#*--*##end
## Add includes to all required signals headers, if applicable
#*--*##foreach( $signalPath in $model.getRequiredSignalPackagePaths($sm, $mapper) )
\#include <${signalPath}StatechartSignals.h>
#*--*##end

#*--*##if( $autocoder.namespaceEnabled )
#*----*##headerNamespaces
#*--*##end
#*--*##if( $SM_TERMINATOR )
const _BailEvt ${smName}::_BAIL_EVENT_;
#*--*##end
#*--*##if( $SM_TERMINABLE || $SM_HAS_FINAL_STATE )
_CompletionEvt ${smName}::_COMPLETION_EVENT_;  // sig and substate modifiable
#*--*##end
#*--*##if( $SM_TERMINABLE || $SM_TERMINATOR || $SM_HAS_FINAL_STATE )

#*--*##end
