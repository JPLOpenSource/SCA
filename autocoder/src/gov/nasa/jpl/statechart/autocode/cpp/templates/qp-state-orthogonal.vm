##
## If orthogonal, dispatch the Signal- and Time- events that haven't been
##  processed above to child regions.
##
##- input vars (in addition to $model, etc.):
##    * $state:      the State Machine state to implement
##    * $stateName:  name of current State Machine state being implemented
##    * $eventName:  substate-prefixed name of the Signal- or TimeEvent object
##    * $eventTransPair:  the event-transition pair
##    * $query:      the IDesiredEvent query object
###############################################################################

    case ${eventName}:
#*--*##if( $autocoder.executionTraceOn )
        strcat(logMsg, " ${eventName}");
        LogEvent::log(logMsg);
#*--*##end
#*--*##foreach( $region in $query.getDesiringRegionsOfState($state, $eventTransPair) )
#*----*##set( $regionName = $mapper.mapToTypeName($region) )## don't use qualified name
#*----*##set( $varname = $mapper.mapToVarName($region) )
#*----*##if( $autocoder.executionTraceOn )
        strcpy(logMsg, stateName);  // reinit logMsg with state name
        strcat(logMsg, " ${regionName}");
        strcat(logMsg, " ${eventName}");
        LogEvent::log(logMsg);
#*----*##end
        me->${varname}->dispatch(e);
#*--*##end
