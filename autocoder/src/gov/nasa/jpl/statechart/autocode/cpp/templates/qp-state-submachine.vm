##
## Handle dispatch of events to submachine state
##
##- input vars (in addition to $model, etc.):
##    * $state:      the State Machine state to implement
##    * $stateName:  name of current State Machine state being implemented
##    * $eventName:  substate-prefixed name of the Signal- or TimeEvent object
##    * $eventTransPair:  the event-transition pair
##    * $isTimerEvent:    flag indicating if we're processing a TimerEvent
##    * $query:      the IDesiredEvent query object
##
##* [SWC 2011.04.05] added support for QF namespace prefix.
###############################################################################
#*--*##set( $stateVarName = $mapper.mapToVarName($state) )

    case ${eventName}:
#*--*##if( $isTimerEvent )## mangle the signal name for Submachine
#*----*##set( $submEvName = $mapper.mapEventToLiteral($eventTransPair.event, $query.getSubmachinePrefixOfEvent($eventTransPair)) )
## call project-overriddable macro to instantiate one-time TimerEvent object
#*----*##instantiateLocalEventVar(${submEvName})
#*----*##if( $autocoder.executionTraceOn )
        strcat(logMsg, " ${submEvName}");
        LogEvent::log(logMsg);
#*----*##end
        // cache 'e' as last dispatched event for completion transition
        me->${stateVarName}LastEvt = e;
        // dispatch Signal stripped of substate name to submachine
        me->${stateVarName}->setIgnoreDropped(true);  // ignore dropped event
        me->${stateVarName}->dispatch(#localEventVar());
#*----*##cleanupLocalEventVar()
#*--*##else
## Signal events don't require mangling substate prefix
#*----*##if( $autocoder.executionTraceOn )
        strcat(logMsg, " ${eventName}");
        LogEvent::log(logMsg);
#*----*##end
        // cache 'e' as last dispatched event for completion transition
        me->${stateVarName}LastEvt = e;
        me->${stateVarName}->setIgnoreDropped(true);  // ignore dropped event
        me->${stateVarName}->dispatch(e);
#*--*##end
