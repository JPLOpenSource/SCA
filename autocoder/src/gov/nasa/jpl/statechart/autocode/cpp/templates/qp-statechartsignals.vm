##
## Statechart Signals header file.
##
##* [SWC 2011.04.25] added handling of specific base signal file location.
###############################################################################
/**
 * @file StatechartSignals.h
 *
 * This file was generated by the StateChart Autocoder and contains an
 * enumerated type listing signals belonging to the following state machines:
 *
#*--*##set( $machines = $smList )
#*--*##foreach( $machine in $machines )
 * ${mapper.sanitize($machine.name)}
#*--*##end
 *
 * &copy; 2009-$year Jet Propulsion Lab / California Institute of Technology
 */
#ifndef _${nsDefPrefix}StatechartSignals_h_
\#define _${nsDefPrefix}StatechartSignals_h_
#*--*##if( $LOCAL_SIGNAL_FILE )

\#include <${nsPathPrefix}IdRange.h>
#*--*##end

#*--*##if( $nsPkgs )
#*----*##headerNamespacesWithPkgs($nsPkgs)
#*--*##end

enum StatechartSignals {
#*--*##if( $BASE_SIGNAL_FILE )
    /* "During" signal */
    DURING = ${qfNs}Q_USER_SIG,

#*--*##end
    /* User defined signals */
#*--*##set( $maxlen = $mapper.getLongestString($mapper.getNamesInTargetLang($sortedSignals)) )
#*--*##if( $LOCAL_SIGNAL_FILE )
#*----*##set( $count = -1 )## keep track of value to add to ID_RANGE_FIRST
#*--*##else
#*----*##set( $count = 4 )## Q_USER_SIG is defined as 4 as of QF version 3.4.01
#*--*##end
#*--*##foreach( $signal in $sortedSignals )
#*----*##set( $sigEnumName = $mapper.mapSignalToEnum($signal) )
#*----*##set( $pad  = $mapper.getPadding($sigEnumName, $maxlen) )
#*----*##set( $count = $count + 1 )
#*----*##if( $LOCAL_SIGNAL_FILE )
    ${sigEnumName}${pad} = ID_RANGE_FIRST + 0x${model.toHexString($count, 4)},
#*----*##else
    ${sigEnumName},${pad}/* 0x${model.toHexString($count, 4)} */
#*----*##end
#*--*##end
##
## Define timer signals, if any
##
#*--*##if( !$sortedTimeEventNames.empty )

    /* Timer Events */
#*----*##set( $maxlen = $mapper.getLongestString($sortedTimeEventNames) + 6)## account for "_timer"
#*----*##foreach( $timeEvName in $sortedTimeEventNames )
#*------*##set( $pad  = $mapper.getPadding($timeEvName, $maxlen) )
#*------*##set( $count = $count + 1 )
#*------*##if( $LOCAL_SIGNAL_FILE )
    ${timeEvName}${pad} = ID_RANGE_FIRST + 0x${model.toHexString($count, 4)},
#*------*##else
    ${timeEvName},${pad}/* 0x${model.toHexString($count, 4)} */
#*------*##end
#*----*##end
#*--*##end
##
## Define "internal" state-machine signals, i.e., completion events, if any
##
#*--*##if( !$completionSet.empty )

    /* State-Machine internal signals */
#*----*##set( $maxlen = $mapper.getLongestString($completionSet))
#*----*##foreach( $completionSig in $completionSet )
#*------*##set( $pad  = $mapper.getPadding($completionSig, $maxlen) )
#*------*##set( $count = $count + 1 )
#*------*##if( $LOCAL_SIGNAL_FILE )
    ${completionSig}${pad} = ID_RANGE_FIRST + 0x${model.toHexString($count, 4)},
#*------*##else
    ${completionSig},${pad}/* 0x${model.toHexString($count, 4)} */
#*------*##end
#*----*##end
#*--*##end
#*--*##if( $BASE_SIGNAL_FILE )

    /* Maximum signal id */
## NB CAREFUL! 0xFFFFFFF will cause linker error as follows
##    ld: rel32 out of range in __start in __start from /usr/lib/crt1.o
    _BAIL_SIG_ = 0x7FFFFFF-1 /* Internal: terminate region/submachine */,
    MAX_SIG    = 0x7FFFFFF   /* Last possible ID! */
#*--*##end
};
#*--*##if( $nsPkgs )
#*----*##footerNamespacesWithPkgs($nsPkgs)
#*--*##end

#endif /* _${nsDefPrefix}StatechartSignals_h_ */
