##
## Defines main() method for testing the generated State Machine code.
##
###############################################################################
#*--*##set( $machines = $model.sort($model.getStateMachines()) )


#ifdef DEFINE_MAIN
\#include <stdio.h>
\#include <stdlib.h>
\#include <string.h>
\#include "qep_port.h"
\#include "qassert.h"

\#include "log_event.h"
\#include "StatechartSignals.h"

#*--*##foreach( $sm in $machines )
#*----*##set( $smName = $mapper.mapToTypeName($sm) )
\#include "${smName}.h"
\#include "${smName}Impl.h"
#*--*##end

Q_DEFINE_THIS_FILE;

\#define MYQUEUESIZE 10

typedef uint32_t  U32;
\#define EVENT_SIZE 16

typedef struct GenEvt {
   QEvent super_;
   U32  data[EVENT_SIZE];
} GenEvt;

enum {QSIZE = 5};           /* Queue size */
enum {USER_ENTRY_SIZE = 256};       /* Number characters on inline prompt */
enum {SOCK_BUFF_SIZE = 100};


#*--*##foreach( $sm in $machines )
#*----*##set( $smName = $mapper.mapToTypeName($sm) )
#*----*##set( $smVar = $mapper.mapToVarName($sm) )
#*----*##set( $index = $velocityCount + 1 )
static const QEvent * test_queuestorage${index}[MYQUEUESIZE];
static ${smName} ${smVar};
static ${smName}Impl ${smVar}Impl;
#*--*##end

void applicationStart(int qsize, char * modelName) {
#*--*##foreach( $sm in $machines )
#*----*##set( $smName = $mapper.mapToTypeName($sm) )
#*----*##set( $smVar = $mapper.mapToVarName($sm) )
#*----*##set( $index = $velocityCount + 1 )
    ${smName}_Constructor(&${smVar}, "${smVar}", &${smVar}Impl);
    QActive_start((QActive *) &${smVar}, ${index}, test_queuestorage${index}, MYQUEUESIZE, NULL, 0, NULL);
#*--*##end
}


/*.................................................................*/
void Q_assert_handler(char const Q_ROM *file, int line) {
    fprintf(stderr, "Assertion failed in %s, line %d", file, line);
    exit(-1);
}
/*.................................................................*/

////////////////////////////////////////////////////////////////////////////////
// @fn receiveCmd()
// @brief Read the next command from stdin as well as from xmlrpc, if any
// @param cmdBuf char* for storing the read command
// @return None
////////////////////////////////////////////////////////////////////////////////
void receiveCmd(char *cmdBuf) {
#ifdef DEFINE_XMLRPC
    LogEvent_read(cmdBuf);
\#else /* DEFINE_XMLRPC */
    scanf("%s", cmdBuf);
#endif /* DEFINE_XMLRPC */
}


int main(int argc, char* argv[]) {
    char cmdBuf[SOCK_BUFF_SIZE];
    int xmlrpcPort = LogEvent_defaultPort();

#ifdef DEFINE_XMLRPC
    if (argc > 2) {  // look for port
        if (0 == strcmp("-p", argv[1])) {
            xmlrpcPort = atoi(argv[2]);
        }
    }
    
#endif /* DEFINE_XMLRPC */
    // Initialize logging, including any GUI connection
    LogEvent_init(xmlrpcPort);

    printf("Quantum Test\nQEP %s\nQF  %s, QF/Linux port %s\n",
           QEP_getVersion(),
           QF_getVersion(), QF_getPortVersion());

    QF_init(MAX_SIG, sizeof(GenEvt), QSIZE*QSIZE);

    applicationStart(QSIZE, argv[1]);
        
    for (;;) {
        // Get the incoming string command from the dmsTerminal or the GUI
        receiveCmd(cmdBuf);

        char *word;
        word = strtok(cmdBuf, " ");

        // We assume the first word contains the signal that is to be published,
        // and the remaining words are data to be used to populate the event.
        GenEvt *event;
        int signal = strtoul(word, NULL, 10);
        if (signal == DURING) {
            QF_tick();
        } else {
            event = Q_NEW(GenEvt, signal);
            // Loop through the remaining words and populate the event
            int i = 0;
            do {
                word = strtok('\0', " ");
                if (word) {
                    Q_ASSERT(i<EVENT_SIZE);
                    event->data[i] = strtoul(word, NULL, 16);
                }
                i = i + 1;
            } while (word);
            QF_publish((QEvent *)event);
        }
        QF_run();
    }

    LogEvent_clean();
}
#endif  /* DEFINE_MAIN */
