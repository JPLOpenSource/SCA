##
## C Header includes
##
##* [SWC 2011.07.06] Updated legal declaration, disclaimer, and file info.
##* [SWC 2011.08.04] adapted from C++ patterns, added module prefix support
##* [SWC 2011.09.27] Implemented SMAP C naming convention for module items
##* [SWC 2012.01.24] Added macro to customize include lines
###############################################################################
##
## File comments
##
//===========================================================================
// This software contains Caltech/JPL confidential information.
//
// Copyright 2009-$year, by the California Institute of Technology.
// ALL RIGHTS RESERVED. United States Government Sponsorship Acknowledged.
// Any commercial use must be negotiated with the Office of Technology
// Transfer at the California Institute of Technology.
//
// This software may be subject to US export control laws and
// regulations. By accepting this document, the user agrees to comply
// with all applicable U.S. export laws and regulations, including the
// International Traffic and Arms Regulations, 22 C.F.R. 120-130 and the
// Export Administration Regulations, 15 C.F.R. 730-744. User has the
// responsibility to obtain export licenses, or other export authority as
// may be required before exporting such information to foreign countries
// or providing access to foreign persons.
//===========================================================================
//
//       File: ${modulePathPrefix}${smName}.h
// Created on: ${model.timestamp()}
//     Author: ${model.username()}@jpl.nasa.gov
// SCACmdLine: ${autocoder.cmdLineInvoked}
//
// This file was generated by the JPL StateChart Autocoders, which converts UML
// Statecharts, in XML, to a C variant of Miro Samek's Quantum Framework.
//===========================================================================
#ifndef ${smDefName}
\#define ${smDefName}

## include QF files, or a custom include file
#*--*##if( $autocoder.hasCustomQfInclude() )
\#include <${autocoder.qfInclude}>
#*--*##else
\#include <stdbool.h>
\#include <qf_port.h>
\#include <qassert.h>
#*--*##end
#*--*##customHeaderIncludes()
#*--*##if( $autocoder.signalNamespaceType.name().equals("LOCAL") )
##- using local namespaces for signals, so need to code the path prefix
\#include <${modulePathPrefix}${modulePrefix}${sigFileName}.h>
#*----*##if( !$baseSigModulePath.equals($modulePathPrefix) )
##-  also include the base signal file
\#include <${baseSigModulePath}${baseSigModule}${sigFileName}.h>
#*----*##end
#*--*##elseif( $autocoder.signalNamespaceType.name().equals("GLOBAL") )
\#include <${baseSigModulePath}${sigFileName}.h>
#*--*##else
\#include <${baseSigModulePath}${modulePrefix}${sigFileName}.h>
#*--*##end
##
## Include the UML StateMachine (and SubMachine) implementation headers
##
\#include <${modulePathPrefix}${implName}.h>
#*--*##foreach( $submachine in $model.sort($model.getSubmachines($sm)) )
\#include <${modulePathPrefix}#mapToTypeName($submachine,"").h>
\#include <${modulePathPrefix}#mapToTypeName($submachine,"impl").h>
#*--*##end
