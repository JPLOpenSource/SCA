##
## Statechart Signals header file.
##
##* [SWC 2011.04.25] added handling of specific base signal file location.
##* [SWC 2011.09.27] Implemented SMAP C naming convention for module items
##* [SWC 2012.09.04] Changed QCompletionEvt name field as munging is inefficient
##  nor seems necessary in C; instead, integer enum value of "parent substate"
##  is used to determine which parent substate should respond to completion.
###############################################################################
#*--*##set( $includeDef = "${fullSigFileName.toUpperCase()}_H_" )
/**
 * @file ${modulePathPrefix}${fullSigFileName}.h
 *
 * Autocode command line: ${autocoder.cmdLineInvoked}
 *
 * This file was generated by the StateChart Autocoder and contains an
 * enumerated type listing signals belonging to the following state machines:
 *
#*--*##set( $machines = $smList )
#*--*##foreach( $machine in $machines )
 * ${mapper.sanitize($machine.name)}
#*--*##end
 *
 * &copy; 2009-$year Jet Propulsion Lab / California Institute of Technology
 */
#ifndef ${includeDef}
\#define ${includeDef}
#*--*##if( $LOCAL_SIGNAL_FILE && !$BASE_SIGNAL_FILE )
#idBaseHeaderFile()
#*--*##end

enum ${fullSigFileName} {
#*--*##if( $BASE_SIGNAL_FILE )
    /* "During" signal */
    DURING = Q_USER_SIG,

#*--*##end
## This must be printed! Python unit test signals parser depends on it
    /* User defined signals */
#*--*##set( $maxlen = $mapper.getLongestString($mapper.getNamesInTargetLang($sortedSignals)) )
#*--*##if( $LOCAL_SIGNAL_FILE )
#*----*##set( $count = -1 )## keep track of value to add to #idBaseEnumName()
#*--*##else
#*----*##set( $count = 4 )## Q_USER_SIG is defined as 4 as of QF version 3.4.01
#*--*##end
#*--*##foreach( $signal in $sortedSignals )
#*----*##set( $sigEnumName = $mapper.mapSignalToEnum($signal) )
#*----*##set( $pad  = $mapper.getPadding($sigEnumName, $maxlen) )
#*----*##set( $count = $count + 1 )
#*----*##if( $LOCAL_SIGNAL_FILE )
    ${sigEnumName}${pad} = #idBaseEnum() + 0x${model.toHexString($count, 4)},
#*----*##else
    ${sigEnumName},${pad}/* 0x${model.toHexString($count, 4)} */
#*----*##end
#*--*##end
##
## Define timer signals, if any
##
#*--*##if( !$sortedTimeEventNames.empty )

    /* Timer Events */
#*----*##set( $maxlen = $mapper.getLongestString($sortedTimeEventNames) + 6)## account for "_timer"
#*----*##foreach( $timeSigEnumName in $sortedTimeEventNames )
#*------*##set( $pad  = $mapper.getPadding($timeSigEnumName, $maxlen) )
#*------*##set( $count = $count + 1 )
#*------*##if( $LOCAL_SIGNAL_FILE )
    ${timeSigEnumName}${pad} = #idBaseEnum() + 0x${model.toHexString($count, 4)},
#*------*##else
    ${timeSigEnumName},${pad}/* 0x${model.toHexString($count, 4)} */
#*------*##end
#*----*##end
#*--*##end
##
## Define "internal" state-machine signals, i.e., completion events, if any
##
#*--*##if( !$completionSet.empty )

    /* State-Machine internal signals */
#*----*##set( $maxlen = $mapper.getLongestString($completionSet))
#*----*##foreach( $completionSig in $completionSet )
#*------*##set( $pad  = $mapper.getPadding($completionSig, $maxlen) )
#*------*##set( $count = $count + 1 )
#*------*##if( $LOCAL_SIGNAL_FILE )
    ${completionSig}${pad} = #idBaseEnum() + 0x${model.toHexString($count, 4)},
#*------*##else
    ${completionSig},${pad}/* 0x${model.toHexString($count, 4)} */
#*------*##end
#*----*##end
#*--*##end
#*--*##if( $BASE_SIGNAL_FILE )

    /* Maximum signal id */
## NB CAREFUL! 0xFFFFFFF will cause linker error as follows
##    ld: rel32 out of range in __start in __start from /usr/lib/crt1.o
    Q_BAIL_SIG = 0x7FFFFFF-1 /* Internal: terminate region/submachine */,
    MAX_SIG    = 0x7FFFFFF   /* Last possible ID! */
#*--*##end
};
##
## autocode the common event type for composite/submachine completion event
##
#*--*##if( $BASE_SIGNAL_FILE )

/**
 * Completion Event used to signal completion of, and thus enable exiting
 * out of, Composite and SubMachine States.  For Submachine State, event carries
 * the ID of instance -- enum value of containing substate -- that terminated.
 * If applicable, Substate event also carries exit point used.
 * 
 * Making this a C Union ensures that just enough memory is allocated to
 * contain the largest event type.
 */
typedef union {
    struct {
        QEvent super;  // C-style inheritance: QEvent is base type
        #dataTypeInt32() substate;   // containing substate for Submachine completion
        #dataTypeInt32() exitPoint;  // exitPoint used to exit Submachine, if applicable
    } completion_evt;

    #dataTypeEvent() base_evt;  // Mission-defined base event
} QCompletionEvt;
#*--*##end

#endif /* ${includeDef} */
