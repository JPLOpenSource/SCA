#*--*##set( $diagramElem = $model.getVertexDiagramElement($vertex) )
#*--*##set( $objTypeName = $model.getType($vertex) )
#*--*##set( $stateName = $mapper.mapToFunctionName($vertex) )
#*--*##set( $varName = $mapper.mapToVarName($vertex) )
#*--*##set( $p1 = $diagramElem.upperLeftCoord() )
#*--*##set( $p2 = $diagramElem.lowerRightCoord() )
#*--*##set( $DQ = '"' )
#*--*##set( $color = "${DQ}#${diagramElem.outlineColorText()}${DQ}" )
#*--*##if( $objTypeName.equals("pseudostate:initial") || $objTypeName.equals("pseudostate:junction") )
        self.${stateName} = self.${canvasName}.create_oval(${p1.x}, ${p1.y}, ${p2.x}, ${p2.y}, fill=${color}, tag="${stateName}")
#*--*##elseif( $objTypeName.equals("pseudostate:choice") )
#*----*##set( $v1 = $diagramElem.middleUpperVertex() )
#*----*##set( $v2 = $diagramElem.rightMiddleVertex() )
#*----*##set( $v3 = $diagramElem.middleLowerVertex() )
#*----*##set( $v4 = $diagramElem.leftMiddleVertex() )
#*----*##set( $diamondFill = "${DQ}#${diagramElem.defaultStateFillColorText()}${DQ}" )
        self.${stateName} = self.${canvasName}.create_polygon(${v1.x}, ${v1.y}, ${v2.x}, ${v2.y}, ${v3.x}, ${v3.y}, ${v4.x}, ${v4.y}, fill=${diamondFill}, outline=${color}, tag="${stateName}")
#*--*##elseif( $objTypeName.equals("pseudostate:deepHistory") )
#*----*##set( $lbp = $diagramElem.textCoord() )
        self.${stateName} = self.${canvasName}.create_oval(${p1.x}, ${p1.y}, ${p2.x}, ${p2.y}, outline=${color}, fill="white", width=2, tag="${stateName}")
        self.${varName}Text = self.${canvasName}.create_text(${lbp.x}, ${lbp.y}, text="H*", anchor=N, font=("Times", 12, "bold"))
#*--*##elseif( $objTypeName.equals("pseudostate:entryPoint")
               || ($objTypeName.equals("connectionPointReference")
                   && $vertex.kind.name().equals("entryPoint")) )
        self.${stateName} = self.${canvasName}.create_oval(${p1.x}, ${p1.y}, ${p2.x}, ${p2.y}, outline=${color}, fill="white", tag="${stateName}")
#*--*##elseif( $objTypeName.equals("pseudostate:exitPoint")
               || ($objTypeName.equals("connectionPointReference")
                   && $vertex.kind.name().equals("exitPoint")) )
        self.${stateName} = self.${canvasName}.create_oval(${p1.x}, ${p1.y}, ${p2.x}, ${p2.y}, outline=${color}, fill="white", tag="${stateName}")
## now draw the X
#*----*##set( $v1 = $diagramElem.circleUpperLeft() )
#*----*##set( $v2 = $diagramElem.circleLowerRight() )
#*----*##set( $v3 = $diagramElem.circleUpperRight() )
#*----*##set( $v4 = $diagramElem.circleLowerLeft() )
        self.${stateName}_XB = self.${canvasName}.create_line(${v1.x}, ${v1.y}, ${v2.x}, ${v2.y}, width=1, fill=${color})
        self.${stateName}_XF = self.${canvasName}.create_line(${v3.x}, ${v3.y}, ${v4.x}, ${v4.y}, width=1, fill=${color})
#*--*##elseif( $objTypeName.equals("state") )
#*----*##set( $lbp = $diagramElem.textCoord() )
#*----*##if( $model.getParentOrthogonalState($vertex) )
#*------*##set( $orthoParentName = $mapper.mapToFunctionName($model.getParentOrthogonalState($vertex)) )
#*------*##set( $color = "self.colorDict['${smName}${orthoParentName}']" )
#*----*##end
        self.${stateName} = self.${canvasName}.create_rectangle(${p1.x}, ${p1.y}, ${p2.x}, ${p2.y}, fill=${color}, width=2, outline="blue", tag="${stateName}")
        self.${varName}Text = self.${canvasName}.create_text(${lbp.x}, ${lbp.y}, text="${stateName}", anchor=N, font=("Times", 12, "bold"))
#*--*##elseif( $objTypeName.equals("finalState") )
#*----*##set( $ip1 = $diagramElem.upperLeftOffset() )
#*----*##set( $ip2 = $diagramElem.lowerRightOffset() )
        self.${stateName} = self.${canvasName}.create_oval(${ip1.x}, ${ip1.y}, ${ip2.x}, ${ip2.y}, fill=${color})
        self.${stateName} = self.${canvasName}.create_oval(${p1.x}, ${p1.y}, ${p2.x}, ${p2.y}, outline="blue", tag="${stateName}")
#*--*##else
# Unknown Vertex type ${objTypeName}!
#*--*##end
