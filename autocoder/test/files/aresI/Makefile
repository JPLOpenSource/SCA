DEFAULT_TARGET = linux
DEFAULT_CC = /usr/bin/gcc
XMLNAME = Ares-I
#CLASSNAME = FC_AGTU MissionManager
CLASSNAME = ReCS

CLASSNAME_SM := $(foreach SM, $(CLASSNAME), -sm $(SM))


PLATFORM := $(shell uname)
ifeq ($(PLATFORM),Darwin)
  LD_OPTS = -Wl,-all_load
else
  LD_OPTS = 
endif

ifndef YAM_TARGET
  TARGET = $(DEFAULT_TARGET)
else
  TARGET = $(YAM_TARGET)
endif

ifndef CPLUSPLUS
  CC = $(DEFAULT_CC)
else
  CC = $(CPLUSPLUS)
endif

ifndef CCFLAGS
  CCFLAGS   = -c -Wall -g
endif

ifndef YAM_ROOT
   YAM_ROOT = ../..
endif

ifndef INCLUDEDIRS
INCLUDEDIRS = -I. \
              -I./autocode \
              -I../../../../QF-C
endif

ifndef LINKDIRS
  LINKDIRS = -L../../../../QF-C/linux
endif

APPJAR = ../../../../autocoder.jar

BINDIR        = ./$(TARGET)

AUTOCODE = java -Xmx256m -jar $(APPJAR) -c -signals $(CLASSNAME_SM)
#AUTOCODE = java -Xmx256m -jar $(APPJAR) -c $(CLASSNAME_SM)


VPATH =  
# You can have a lot of vpath directives
vpath %.c autocode 
vpath %.h autocode

XMLFILES = $(addsuffix .xml, $(XMLNAME))
BACKXMLFILES = $(addprefix ../, $(XMLFILES))

IMPLFILES = $(addsuffix Impl.c, $(CLASSNAME))
PYFILES = $(addsuffix .py, $(CLASSNAME))
AUTOSRCS = $(addsuffix .c, $(CLASSNAME)) 
OTHERSRCS = log_event.c \
            application.c \
	        main.c \
            $(IMPLFILES)
SRCS = $(OTHERSRCS) $(AUTOSRCS)

EXECUTABLE = active
#AUTOGENERATED = $(addprefix autocode/, $(AUTOSRCS))

TEMPOBJS = $(notdir $(SRCS))
OBJS = $(TEMPOBJS:.c=.o)
BINOBJS = $(addprefix $(BINDIR)/, $(OBJS))

all: links libs bins

links:
	@if (test -d $(BINDIR)) then :;\
               else echo "Creating directory "$(BINDIR)... ; \
                      mkdir $(BINDIR); \
	fi                                                                                                     
libs: auto $(BINOBJS)

bins: $(BINDIR)/$(EXECUTABLE)

clean:
	rm -rf $(BINDIR)
	rm -f autocode/*.h autocode/*.c autocode/*.py autocode/*.pyc autocode/velocity.* $(PYFILES) StatechartSignals.py

auto: $(AUTOSRCS) $(PYFILES)
	ln -s -f autocode/StatechartSignals.py StatechartSignals.py

%.py:	
	ln -s -f autocode/$@ $@

$(BINDIR)/$(EXECUTABLE) : $(BINOBJS)
	$(CC) -o $(BINDIR)/$(EXECUTABLE) $(BINOBJS) $(LINKDIRS) $(LD_OPTS) -lqf-c

$(BINDIR)/%.o : %.c StatechartSignals.h
	$(CC) $(CCFLAGS) $(INCLUDEDIRS) $< -o $@

$(AUTOSRCS) : $(XMLFILES)
	cd autocode ; \
		$(AUTOCODE) $(BACKXMLFILES)
	cd ..


# $Log: Makefile,v $
# Revision 1.5  2008/11/04 19:20:40  watney
# *** empty log message ***
#
# Revision 1.4  2008/08/06 16:40:34  watney
# *** empty log message ***
#
# Revision 1.3  2007/12/28 16:39:23  watney
# *** empty log message ***
#
# Revision 1.2  2007/08/01 22:10:05  watney
# *** empty log message ***
#
# Revision 1.1.1.1  2007/05/14 18:41:37  watney
# Imported sources
#
# Revision 1.8  2007/02/05 22:25:22  watney
# *** empty log message ***
#
# Revision 1.7.4.1  2007/02/05 22:24:39  watney
# *** empty log message ***
#
# Revision 1.7  2007/02/01 23:51:29  eddieb
# *** empty log message ***
#
# Revision 1.6.6.1  2007/02/01 23:50:57  eddieb
# Use new Java autocoder classes
#
# Revision 1.6  2007/01/31 22:32:04  watney
# *** empty log message ***
#
# Revision 1.5.6.1  2007/01/31 21:58:02  watney
# *** empty log message ***
#
# Revision 1.5  2006/09/14 00:06:02  watney
# *** empty log message ***
#
# Revision 1.4.6.1  2006/09/14 00:05:26  watney
# *** empty log message ***
#
#
