##
## Implement state transition, handling guard, action list, and target state.
##
##- input vars:
##    * $_state :       state to transition from
##    * $_transition :  transition object
##    * $_func :        name of transition function, "stateStart" or "stateTran"
##    * $_isQHsm :      flag indicating if inside class QHsm (true), or QActive (false)
##
##* [SWC 2009.09.17] ported from C template.
###############################################################################
#*--*##if ( !$guardKeyword )#set( $guardKeyword = "if" )#end
##
## Handle guards
##
#*--*##if( $model.hasGuard($_transition) )## has guard!
#*----*##set( $spc = $mapper.indentation() )
#*----*##set( $exprStr = $_transition.guard.specification.body )
#*----*##if( $model.isCallAction($exprStr) )
#*------*##set( $funcCall = $model.getCallParts($exprStr) )
#*------*##set( $funcName = $mapper.sanitize($funcCall.name()) )
##- there's parameters if callParts has more than 1 element
$spc            ${guardKeyword} self.__${funcName}(#if( $funcCall.hasArgs() )${funcCall.argStr()}#end) == True:
#*----*##else
$spc            ${guardKeyword} ${exprStr}:
#*----*##end
#*----*##set( $discard = $mapper.incIndent() )
#*--*##end
#*--*##set( $spc = $mapper.indentation() )
##
## Do action
##
#*--*##doAction( $_transition.effect, $spc, $_isQHsm )
##
## Handle target state(s) by type, but only if transition is not "internal"
##  (pseudostate handling not needed?:  join, fork, entryPoint)
##
#*--*##if( !($_transition.internal) )
#*----*##set( $tgtState = $model.getTarget($_state, $_transition) )
#*----*##set( $objTypeName = $model.getType($tgtState) )
#*----*##if( $objTypeName.equals("pseudostate:deepHistory") )
##- process deep history pseudostate
#*------*##set( $parentName = $mapper.sanitize($model.getParentState($tgtState).name) )
#*------*##set( $histVar = "__${parentName}_history" )
$spc            self.${_func}(self.${histVar})
#*----*##elseif( $objTypeName.equals("pseudostate:junction") || $objTypeName.equals("pseudostate:choice") )
##- process junction pseudostate
##    obtain the junction outgoing transitions, then recurse stateTransition()
#*------*##set( $guardKeyword = "if" )## start inner branches with 'if'
#*------*##if( $objTypeName.equals("pseudostate:choice") )## print decision node label
$spc            #
$spc            # Decision: $tgtState.name
#*------*##end
#*------*##foreach( $juncTrans in $model.getJunctionTransitions($tgtState) )
#*--------*##if( $velocityHasNext )## not last one yet
#*----------*##stateTransition( $tgtState, $juncTrans, $_func, $_isQHsm )
#*----------*##set( $guardKeyword = "elif" )## use elif after the first if
#*--------*##else## last transition out, the "else"!
$spc            else:
#*----------*##if( $juncTrans )## valid no-guard transition
#*------------*##set( $discard = $mapper.incIndent() )
#*------------*##stateTransition( $tgtState, $juncTrans, $_func, $_isQHsm )
#*------------*##set( $discard = $mapper.decIndent() )
#*----------*##else
$spc                printf("No junction guard conditions matched!")
#*----------*##end
#*--------*##end
#*------*##end
#*------*##set( $guardKeyword = "if" )## restore to avoid global-var problem
#*----*##elseif( $objTypeName.equals("pseudostate:exitPoint") )
##- TODO process exitPoint pseudostate
##    refer to lines 1315--1330 in StateChartCWriter.writeToExitPoint()
$spc            # TODO: exitPoint Pseudostate! ${tgtState.getQualifiedName()}
$spc            pass
#*----*##elseif( $objTypeName.equals("pseudostate:terminate") )
##- process terminate pseudostate
$spc            # TODO: terminate Pseudostate! Currently unsupported, use cautiously!
$spc            self._stop()
#*----*##elseif( $objTypeName.equals("connectionPointReference") )
##- TODO process connection point reference to a submachine?!
##    refer to lines 1341--1380 in StateChartCWriter.writeToConnectionPointReference()
$spc            # TODO: connectionPointReference! ${tgtState.getQualifiedName()}
$spc            pass
#*----*##elseif( $objTypeName.equals("state") || $objTypeName.equals("finalState") )
##- process regular state (also handles submachine state automagically) or final
#*------*##set( $stateName = $mapper.mapToFunctionName($tgtState) )
$spc            self.${_func}(self.${stateName})
#*----*##else
$spc            # Encountered $objTypeName, which we don't yet know how to handle!
$spc            pass
#*----*##end
#*--*##end
#*--*##if( $model.hasGuard($_transition) )## close guard block
#*----*##set( $discard = $mapper.decIndent() )
#*--*##end
