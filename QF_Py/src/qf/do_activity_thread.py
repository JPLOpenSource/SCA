#
# Copyright 2009, 2010 California Institute of Technology.
# ALL RIGHTS RESERVED. U.S. Government Sponsorship acknowledged.
#
"""
File: do_activity_thread.py

Date Created:  22-Dec-2009 
Created By:      reder

Python class to implement a thread for doActivity effect
within autogenerated state-machine active objects.

The class is instanced and started on state entry
before the entry action, if any.

The thread is tested on state exist and killed if alive, but
the instance is always destroyed.
"""
# Python imports here
import sys
import trace
import time
import threading

class DoThread (threading.Thread):
    """
    A class for threading with a kill method in it.
    """
    def __init__(self, *args, **keywords):
        """
        Constructor
        
        Specify the function object using
        target=func
        kwargs=dict{"args var":value}
        """
        threading.Thread.__init__(self, *args, **keywords)
        self.killed = False


    def start(self):
        """
        Start the thread.
        """
        self.__run_backup = self.run
        self.run = self.__run              # Force the Thread to install our trace.
        threading.Thread.start(self)


    def __run(self):
        """
        Hacked run function, which installs the trace.
        """
        sys.settrace(self.globaltrace)
        self.__run_backup()
        self.run = self.__run_backup


    def globaltrace(self, frame, why, arg):
        if why == 'call':
            return self.localtrace
        else:
            return None


    def localtrace(self, frame, why, arg):
        if self.killed:
            if why == 'line':
                raise SystemExit()
            return self.localtrace

    def kill(self):
        self.killed = True


if __name__ == "__main__":
    #
    # Example usage for test purposes only
    #
    # This illustrates running a function in a separate thread.
    # The thread is killed before the function finishes.
    
    def func(a="arg"):
        """
        Threaded function.
        """
        print 'Function started'
        for i in xrange(1000000):
            print "working, %s\n" % a
            pass
        print 'Function finished'

    A = DoThread(target=func,kwargs={'a':"more args"})
    A.start()
    for i in xrange(1000):
        pass
    
    if A.isAlive() == True:
        print "Thread is alive, kill it!"
        A.kill()

    print 'End of main program'
