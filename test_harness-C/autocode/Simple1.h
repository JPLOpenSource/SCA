//===========================================================================
// This software contains Caltech/JPL confidential information.
//
// Copyright 2009-2016, by the California Institute of Technology.
// ALL RIGHTS RESERVED. United States Government Sponsorship Acknowledged.
// Any commercial use must be negotiated with the Office of Technology
// Transfer at the California Institute of Technology.
//
// This software may be subject to US export control laws and
// regulations. By accepting this document, the user agrees to comply
// with all applicable U.S. export laws and regulations, including the
// International Traffic and Arms Regulations, 22 C.F.R. 120-130 and the
// Export Administration Regulations, 15 C.F.R. 730-744. User has the
// responsibility to obtain export licenses, or other export authority as
// may be required before exporting such information to foreign countries
// or providing access to foreign persons.
//===========================================================================
//
//       File: Simple1.h
// Created on: 25-Apr-2016 10:11:52
//     Author: watney@jpl.nasa.gov
// SCACmdLine: -c -sm Simple1 ../Simple.mdxml
//
// This file was generated by the JPL StateChart Autocoders, which converts UML
// Statecharts, in XML, to a C variant of Miro Samek's Quantum Framework.
//===========================================================================
#ifndef SIMPLE1_H_
#define SIMPLE1_H_

#include <stdbool.h>
#include <qf_port.h>
#include <qassert.h>
#include <StatechartSignals.h>
#include <Simple1Impl.h>

/**
 * Enumerate all the states that the state machine may be in at any given time.
 * An addition to the Samek pattern, state enums facilitate convenient
 * query of current state a State Machine is in at a given moment.
 */
typedef enum Simple1_state {
    SIMPLE1__TOP__, /* Top = 0 */
    SIMPLE1_S1, /* State = 1 */
    SIMPLE1_S2  /* State = 2 */
} Simple1_state;

/**
 * Declare the state machine struct, encapsulating the extended state variables.
 * It tracks any timers, owned orthogonal regions, history states, substates.
 */
typedef struct Simple1 {
    QActive super;  // C-style inheritance
    QActive *active;  // containing machine if this is a submachine instance
    char objName[128];
    Simple1Impl *impl;
    enum Simple1_state myState;
} Simple1;

/** 
 * Simple1 Constructor
 *
 * This State machine constructor is responsible for initializing
 * the object, allocating and initializing any orthogonal regions, 
 * and initializing the timers.
 */
Simple1 *Simple1_Constructor (Simple1 *me, const char *objNameNew, Simple1Impl *implObj, QActive *active);

/**
  * Returns the instance of the Implementation class for this QActive.
  */
Simple1Impl *Simple1_getImpl (Simple1 *me);

/**
 * Returns the unique enum representing the current state of this machine.
 */
Simple1_state Simple1_get_CurrentState (Simple1 *me);

/**
 * Returns whether this StateMachine instance is instantiated as a substate
 * of another StateMachine, true if "active" is NOT "this".
 */
bool Simple1_is_substate (Simple1 *me);

/**
 * Re-initializes only if instanced as a SubMachine state.
 */
void Simple1_reinit (Simple1 *me);

/**
 * Method to initialize state machine to the initial pseudostate
 */
QState Simple1_initial (Simple1 *me, QEvent const *e);

/**
 * State-handler methods
 */
QState Simple1_S1 (Simple1 *me, QEvent const *e);
QState Simple1_S2 (Simple1 *me, QEvent const *e);

#endif /* SIMPLE1_H_ */
