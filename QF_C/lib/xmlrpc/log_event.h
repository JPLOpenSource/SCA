#ifndef log_event_h
#define log_event_h
#include <stdbool.h>

int LogEvent_defaultPort();
////////////////////////////////////////////////////////////////////////////////
// @fn LogEventInit()
// @brief Initializes the GUI connection, if any
// @param int port value
// @return None
////////////////////////////////////////////////////////////////////////////////
void LogEvent_init(int port);
////////////////////////////////////////////////////////////////////////////////
// @fn LogEventLog()
// @brief Logs Events
// @param Event message string
// @return None
////////////////////////////////////////////////////////////////////////////////
void LogEvent_log(char *msg);
////////////////////////////////////////////////////////////////////////////////
// @fn LogEventRead()
// @brief Reads any event from the other end of the logging communication pipe
// @param Storage buffer for read event
// @return None
////////////////////////////////////////////////////////////////////////////////
void LogEvent_read(char *buf);
////////////////////////////////////////////////////////////////////////////////
// @fn LogEventClean()
// @brief Cleans up the GUI connection, if any
// @param None
// @return None
////////////////////////////////////////////////////////////////////////////////
void LogEvent_clean();

////////////////////////////////////////////////////////////////////////////
// @fn AttributeMapper::init()
// @brief Initializes a map for the given SM Impl object
// @param Impl object for which to initialize an attribute mapper
// @return None
////////////////////////////////////////////////////////////////////////////
void AttributeMapper_init (void* obj);
////////////////////////////////////////////////////////////////////////////
// @fn AttributeMapper::set()
// @brief Sets an attribute of given object to true or false
// @param Impl object for which to set the attribute
// @param Name string of attribute to set
// @param New boolean value to set attribute to
// @return None
////////////////////////////////////////////////////////////////////////////
void AttributeMapper_set (void* obj, const char* attr, bool flag);
////////////////////////////////////////////////////////////////////////////
// @fn AttributeMapper::get()
// @brief Gets the value of the given attribute for the given object
// @param Impl object for which to get attribute value
// @param Name string of attribute to get
// @return boolean value of attribute
////////////////////////////////////////////////////////////////////////////
bool AttributeMapper_get (void* obj, char* attr);
////////////////////////////////////////////////////////////////////////////
// @fn AttributeMapper::clean()
// @brief Cleans up the attribute map of the given SM Impl object
// @param Impl object for which to destroy the attribute mapper
// @return None
////////////////////////////////////////////////////////////////////////////
void AttributeMapper_clean (void* obj);
////////////////////////////////////////////////////////////////////////////
// @fn AttributeMapper_strtobool()
// @brief Utility method to convert a String to a boolean value
// @param String representation of boolean: "True" for 1, "False" for 0
// @return boolean value for string
////////////////////////////////////////////////////////////////////////////
bool AttributeMapper_strtobool (const char* valStr);
////////////////////////////////////////////////////////////////////////////
// @fn AttributeMapper_booltostr()
// @brief Utility method to convert a boolean value to a String
// @param boolean value to convert to String: 1=>"True", 0=>"False"
// @return string representation of boolean value
////////////////////////////////////////////////////////////////////////////
char* AttributeMapper_booltostr (bool flag);

#endif /* log_event_h */
